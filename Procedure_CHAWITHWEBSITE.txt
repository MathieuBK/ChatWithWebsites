////////////  CREATE VIRTUAL ENVIRONMENT ///////////////

1. requirements.txt -> Create "requirements.txt" file in root
pandas
numpy
scikit-learn
streamlit

2. Open VSCode terminal -> View > Terminal
2. Go to directory -> cd or cd.. 
3. Create a Virtual Environment -> python3 -m venv venv
4. Go to venv folder -> cd venv
5. Activate Virtual Environment -> Scripts\activate.bat
6. Go to source folder -> cd..
7. Install required Python packages -> pip install -r requirements.txt
8. Run Streamlit app -> in VSC terminal, type streamlit run PATH/file.py => 
streamlit run app/main.py





////////////  INSTALL REQUIRED PACKAGES ///////////////

#1 - pip install streamlit langchain langchain-openai

#2 - /src/app.py -> Create folder "src" and create file in it "app.py"





////////////  CREATE GRAPHICAL USER INTERFACE ///////////////

#1 - app.py -> Update code

import streamlit as st

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")


#2 - streamlit run src/app.py -> OK





////////////  CREATE CHAT COMPONENT ///////////////

#1 - app.py -> Update code

st.chat_input("Type your message here...")

with st.chat_message("AI"):
    st.write("Hello, how can I help you ?")

with st.chat_message("human"):
    st.write("I want to know about LangChain")

with st.chat_message("AI"):
    st.write("Na")


#2 - streamlit run src/app.py -> OK







////////////  MAKE CHAT INTERACTIVE ///////////////

#1 - app.py -> Update code

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":

    with st.chat_message("human"):
        st.write(user_query)

    with st.chat_message("AI"):
        st.write("I don't know")


#2 - streamlit run src/app.py -> OK
// AI automatically responds "I don't know to all user messages"








////////////  ADD HISTORY WITH MOCK GET_RESPONSE() FUNCTION ///////////////

#1 - app.py -> Update code

import streamlit as st

def get_response(user_input):
    return "I don't know"

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

# user input
user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":
    response = get_response(user_query)

    with st.chat_message("Human"):
        st.write(user_query)

    with st.chat_message("AI"):
        st.write(response)


#2 - streamlit run src/app.py -> OK
// AI automatically responds "I don't know to all user messages"







////////////  ADD CHAT HISTORY ///////////////

#1 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

def get_response(user_input):
    return "I don't know"

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")
chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

# user input
user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":
    response = get_response(user_query)
    chat_history.append(HumanMessage(content=user_query))
    chat_history.append(AIMessage(content=response))

# log to check
with st.sidebar:
    st.write(chat_history)


#2 - streamlit run src/app.py -> OK
// Messages are stored in an array displayed on the sidebar but array is reinitialized after each new message submitted 








////////////  MAKE CHAT HISTORY PERSISTENT ///////////////

#1 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

def get_response(user_input):
    return "I don't know"

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

# user input
user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":
    response = get_response(user_query)
    st.session_state.chat_history.append(HumanMessage(content=user_query))
    st.session_state.chat_history.append(AIMessage(content=response))

# log to check
with st.sidebar:
    st.write(st.session_state.chat_history)


#2 - streamlit run src/app.py -> OK
// Now messages are persistent and array is not reinitialized if it is the same session








////////////  DISPLAY MESSAGE HISTORY ///////////////

#1 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

def get_response(user_input):
    return "I don't know"

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

# user input
user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query != "":
    response = get_response(user_query)
    st.session_state.chat_history.append(HumanMessage(content=user_query))
    st.session_state.chat_history.append(AIMessage(content=response))

 # conversation
    for message in st.session_state.chat_history:
        if isinstance(message, AIMessage):
            with st.chat_message("AI"):
                st.write(message.content)
        elif isinstance(message, HumanMessage):
            with st.chat_message("Human"):
                st.write(message.content)


#2 - streamlit run src/app.py -> OK
// Now messages are persistent and displayed in the chat main layout








////////////  TEST FOR URL  ///////////////

#1 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage

def get_response(user_input):
    return "I don't know"

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

if website_url is None or website_url == "":
    st.info("Please enter a website URL")

else:
    # user input
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        response = get_response(user_query)
        st.session_state.chat_history.append(HumanMessage(content=user_query))
        st.session_state.chat_history.append(AIMessage(content=response))

    # conversation
        for message in st.session_state.chat_history:
            if isinstance(message, AIMessage):
                with st.chat_message("AI"):
                    st.write(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("Human"):
                    st.write(message.content)


#2 - streamlit run src/app.py -> OK
// Make sure an URL is entered before the user could start a conversation with the bot







////////////  SCRAP HTML PAGE WITH LANGCHAIN  ///////////////

#1 - Beautifulsoup4 -> Install beautifulsoup 
https://anaconda.org/anaconda/beautifulsoup4

#2 - pip install beautifulsoup4
or conda install anaconda::beautifulsoup4

#3 - Import -> Import related packages
from langchain_community.document_loaders import WebBaseLoader

#4 - Vector store -> Update "app.py" code with Vector Store function

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.document_loaders import WebBaseLoader

def get_response(user_input):
    return "I don't know"

def get_vectorstore_from_url(url):
    # get the text in document form
    loader = WebBaseLoader(url)
    documents = loader.load()
    
    return documents




#5 - app.py -> Update code

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

if website_url is None or website_url == "":
    st.info("Please enter a website URL")

else:
    documents = get_vectorstore_from_url(website_url)
    with st.sidebar:
        st.write(documents)
    # user input
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        response = get_response(user_query)
        st.session_state.chat_history.append(HumanMessage(content=user_query))
        st.session_state.chat_history.append(AIMessage(content=response))

    # conversation
        for message in st.session_state.chat_history:
            if isinstance(message, AIMessage):
                with st.chat_message("AI"):
                    st.write(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("Human"):
                    st.write(message.content)

#6 - streamlit run src/app.py -> OK
// Input a random website url and check in the sidebar that the text is parsed by bs4

!!!ModuleNotFoundError: No module named 'bs4'
2024-03-01 11:03:41.994 Uncaught app exception
==> #a - Stop Streamlit with ctrl+c
==> #b - pip install beautifulsoup4 -> install bs4 in (venv) environment
==> #c - streamlit run src/app.py -> Check if OK








////////////  SPLIT TEXT INTO CHUNKS  ///////////////

#1 - app.py -> Import RecursiveCharacterTextSplitter
from langchain.text_splitter import RecursiveCharacterTextSplitter

#2 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.document_loaders import WebBaseLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

def get_response(user_input):
    return "I don't know"

def get_vectorstore_from_url(url):
    # get the text in document form
    loader = WebBaseLoader(url)
    document = loader.load()

    # split the document into chunks
    text_splitter = RecursiveCharacterTextSplitter()
    document_chunks = text_splitter.split_documents(document)
    
    return document_chunks

# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

if website_url is None or website_url == "":
    st.info("Please enter a website URL")

else:
    document_chunks = get_vectorstore_from_url(website_url)
    with st.sidebar:
        st.write(document_chunks)
    # user input
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        response = get_response(user_query)
        st.session_state.chat_history.append(HumanMessage(content=user_query))
        st.session_state.chat_history.append(AIMessage(content=response))

    # conversation
        for message in st.session_state.chat_history:
            if isinstance(message, AIMessage):
                with st.chat_message("AI"):
                    st.write(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("Human"):
                    st.write(message.content)


#3 - streamlit run src/app.py -> OK
// Input a random website url and check in the sidebar that the text is correctly parsed by bs4
 and split into chunks








////////////  CREATE VECTOR STORE  ///////////////

#0 - pip install chromadb
#1 - app.py -> Import Chroma + Enbeddings
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings, ChatOpenAI


#2 - app.py -> Update code to complete vector_store function 

def get_vectorstore_from_url(url):
    # get the text in document form
    loader = WebBaseLoader(url)
    document = loader.load()

    # split the document into chunks
    text_splitter = RecursiveCharacterTextSplitter()
    document_chunks = text_splitter.split_documents(document)

    # create a vectorstore from the chunks
    vector_store = Chroma.from_documents(document_chunks, OpenAIEmbeddings())
    
    return vector_store






////////////  GET OPENAI API KEYS  ///////////////

#1- Go to OPENAI dashbord -> https://platform.openai.com/api-keys
#2 - API Key -> Create a new API Secret key and name it "ChatWithWebsite"
#3 - .env -> Create a file ".env" in root
#4 - .env -> Copy the OPENAI_API_KEY to .env 
	OPENAI_API_KEY="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"

#5 - .gitignore -> Create a file ".gitignore" in root and write ".env" in it
.env

#6 - pip install python-dotenv -> Necessary to import the variables in .env file
// Make sure to install package in (venv) environment

#7 - app.py -> Update code to add import + load_dotenv()
from dotenv import load_dotenv
load_dotenv() // TO ADD AFTER IMPORTS TO MAKE VARIABLES IN .ENV AVAILABLE IN THE APP


#8 - app.py -> Update code







////////////  CREATE RETRIEVER CHAIN  ///////////////

#1 - app.py -> Import related packages from OpenAI
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.core.prompts import ChatPromptTemplate, MessagesPlaceholder



#2 - Retriever Chain -> Create function get_context_retriever_chain in src > app.py

def get_context_retriever_chain(vector_store):
    llm = ChatOpenAI()
    
    retriever = vector_store.as_retriever()
    
    prompt = ChatPromptTemplate.from_messages([
      MessagesPlaceholder(variable_name="chat_history"),
      ("user", "{input}"),
      ("user", "Given the above conversation, generate a search query to look up in order to get information relevant to the conversation")
    ])
    
    retriever_chain = create_history_aware_retriever(llm, retriever, prompt)
    
    return retriever_chain


#3 - app.py -> Import library to initialize the language model
from langchain.core.prompts import ChatPromptTemplate, MessagesPlaceholder


#4 - app.py -> Update code  to add prompt

prompt = ChatPromptTemplate.from_messages([
      MessagesPlaceholder(variable_name="chat_history"),
      ("user", "{input}"),
      ("user", "Given the above conversation, generate a search query to look up in order to get information relevant to the conversation")
    ])

// prompt will be populated with the chat history values we pass in & MessagesPlaceholder replace all the values of the chat_history variable if the chat_history variable exists. 


#5 - app.py -> Import relevant package to retrieve messages 
from langchain.chains import create_history_aware_retriever, create_retrieval_chain







////////////  TEST RETRIEVER CHAIN  ///////////////

#1 - app.py -> Update code

import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.document_loaders import WebBaseLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from dotenv import load_dotenv
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain


load_dotenv()


def get_response(user_input):
    return "I don't know"

def get_vectorstore_from_url(url):
    # get the text in document form
    loader = WebBaseLoader(url)
    document = loader.load()

    # split the document into chunks
    text_splitter = RecursiveCharacterTextSplitter()
    document_chunks = text_splitter.split_documents(document)

    # create a vectorstore from the chunks
    vector_store = Chroma.from_documents(document_chunks, OpenAIEmbeddings())
    
    return vector_store

def get_context_retriever_chain(vector_store):
    llm = ChatOpenAI() # Initialize Language model
    
    retriever = vector_store.as_retriever()
    
    prompt = ChatPromptTemplate.from_messages([
      MessagesPlaceholder(variable_name="chat_history"),
      ("user", "{input}"),
      ("user", "Given the above conversation, generate a search query to look up in order to get information relevant to the conversation")
    ])
    
    retriever_chain = create_history_aware_retriever(llm, retriever, prompt)
    
    return retriever_chain


# app config
st.set_page_config(page_title="Chat with websites", page_icon="🤖")
st.title("Chat with websites")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
    AIMessage(content="Hello, I am a bot. How can I help you?"),
]

# sidebar
with st.sidebar:
    st.header("Settings")
    website_url = st.text_input("Website URL")

if website_url is None or website_url == "":
    st.info("Please enter a website URL")

else:
    vector_store = get_vectorstore_from_url(website_url)
    retriever_chain = get_context_retriever_chain(vector_store)

    # user input
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        response = get_response(user_query)
        st.session_state.chat_history.append(HumanMessage(content=user_query))
        st.session_state.chat_history.append(AIMessage(content=response))

        retrieved_documents = retriever_chain.invoke({
            "chat_history": st.session_state.chat_history,
            "input": user_query
        })
        st.write(retrieved_documents)

    # conversation
        for message in st.session_state.chat_history:
            if isinstance(message, AIMessage):
                with st.chat_message("AI"):
                    st.write(message.content)
            elif isinstance(message, HumanMessage):
                with st.chat_message("Human"):
                    st.write(message.content)

#2 - streamlit run src/app.py -> OK
// Ask a question and the chat qhould return only the relevant documents (chunks) that answer the question






////////////  CREATE CONVERSATIONAL RAG CHAIN  ///////////////

#1 - app.py -> Update code






////////////  DEPLOYMENT  ///////////////

#1 - Requirements -> Generate requirements.txt file

#2 - Activate Virtual Environment
	1. Open VSCode terminal -> View > Terminal
	2. Go to directory -> cd or cd.. 
	3. Create a Virtual Environment -> python3 -m venv venv
	4. Go to venv folder -> cd venv
	5. Activate Virtual Environment -> Scripts\activate.bat
	6. Go to source folder -> cd..
	7. Install required Python packages -> pip install -r requirements.txt
	8. Run Streamlit app -> in VSC terminal, type streamlit run PATH/file.py => streamlit run app/main.py

!!! #3 - pip install grep -> pip freeze | findstr streamlit >> requirements.txt
// MARCHE PAS SUR WINDOWS => USE FINDSTR INSTEAD 

#4 - pip freeze | findstr streamlit >> requirements.txt
#5 - pip freeze | findstr langchain lanchain_openai beautifulsoup4 python-dotenv chromadb >> requirements.txt


#1 - Render -> go to render and create an account  https://render.com/





 -